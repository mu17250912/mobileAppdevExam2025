import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

class AiAssistantService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  String? get currentUserId => _auth.currentUser?.uid;

  // Enhanced AI Response with Business Intelligence
  Future<String> getIntelligentResponse(String userInput, String language) async {
    final input = userInput.toLowerCase();
    
    // Get business data for context-aware responses
    final businessData = await _getBusinessContext();
    
    // Stock management queries
    if (input.contains('stock') || input.contains('inventory')) {
      return _getStockAdvice(businessData, language);
    }
    
    // Sales and revenue queries
    if (input.contains('sales') || input.contains('revenue') || input.contains('profit')) {
      return _getSalesAdvice(businessData, language);
    }
    
    // Cost optimization queries
    if (input.contains('cost') || input.contains('save') || input.contains('minimize') || input.contains('optimize')) {
      return _getCostOptimizationAdvice(businessData, language);
    }
    
    // Customer management queries
    if (input.contains('customer') || input.contains('client')) {
      return _getCustomerAdvice(businessData, language);
    }
    
    // General business advice
    if (input.contains('advice') || input.contains('help') || input.contains('suggestion')) {
      return _getGeneralBusinessAdvice(businessData, language);
    }
    
    // Greeting responses
    if (input.contains('hello') || input.contains('hi') || input.contains('bonjour')) {
      return _getGreetingResponse(businessData, language);
    }
    
    // Default response
    return _getDefaultResponse(language);
  }

  // Get business context for intelligent responses
  Future<Map<String, dynamic>> _getBusinessContext() async {
    if (currentUserId == null) return {};

    try {
      // Get recent sales
      final salesQuery = await _firestore
          .collection('users')
          .doc(currentUserId)
          .collection('sales')
          .orderBy('createdAt', descending: true)
          .limit(10)
          .get();

      final sales = salesQuery.docs.map((doc) => doc.data()).toList();

      // Get products
      final productsQuery = await _firestore
          .collection('users')
          .doc(currentUserId)
          .collection('products')
          .get();

      final products = productsQuery.docs.map((doc) => doc.data()).toList();

      // Get customers
      final customersQuery = await _firestore
          .collection('users')
          .doc(currentUserId)
          .collection('customers')
          .get();

      final customers = customersQuery.docs.map((doc) => doc.data()).toList();

      // Calculate metrics
      final totalSales = sales.fold<double>(0, (sum, sale) => sum + (sale['totalAmount'] ?? 0));
      final lowStockProducts = products.where((p) => (p['stock'] ?? 0) <= (p['minStock'] ?? 10)).toList();
      final topProducts = _getTopProducts(sales);

      return {
        'totalSales': totalSales,
        'recentSales': sales.length,
        'totalProducts': products.length,
        'lowStockProducts': lowStockProducts,
        'topProducts': topProducts,
        'totalCustomers': customers.length,
        'averageTransactionValue': sales.isNotEmpty ? totalSales / sales.length : 0,
      };
    } catch (e) {
      return {};
    }
  }

  List<Map<String, dynamic>> _getTopProducts(List<Map<String, dynamic>> sales) {
    final productSales = <String, int>{};
    for (final sale in sales) {
      final productName = sale['productName'] ?? 'Unknown';
      productSales[productName] = (productSales[productName] ?? 0) + ((sale['quantity'] ?? 0) as int);
    }
    
    return productSales.entries
        .map((e) => {'name': e.key, 'quantity': e.value})
        .toList()
      ..sort((a, b) => (b['quantity'] as int).compareTo(a['quantity'] as int));
  }

  String _getStockAdvice(Map<String, dynamic> businessData, String language) {
    final lowStockProducts = businessData['lowStockProducts'] as List? ?? [];
    final totalProducts = businessData['totalProducts'] ?? 0;
    
    if (language == 'fr') {
      if (lowStockProducts.isNotEmpty) {
        final productNames = lowStockProducts.map((p) => p['name']).join(', ');
        return '‚ö†Ô∏è Alerte Stock Faible: ${lowStockProducts.length} produit(s) ont un stock faible.\n\nProduits concern√©s: $productNames\n\nRecommandations:\n‚Ä¢ R√©approvisionnez ces produits rapidement\n‚Ä¢ Analysez les tendances de vente\n‚Ä¢ Consid√©rez augmenter le stock minimum\n‚Ä¢ Surveillez les produits populaires';
      } else {
        return '‚úÖ Votre inventaire est bien g√©r√©! Aucun produit en stock faible.\n\nConseils pour maintenir:\n‚Ä¢ V√©rifiez r√©guli√®rement les niveaux de stock\n‚Ä¢ Analysez les tendances de vente\n‚Ä¢ Ajustez les seuils de stock minimum\n‚Ä¢ Planifiez les r√©approvisionnements';
      }
    } else {
      if (lowStockProducts.isNotEmpty) {
        final productNames = lowStockProducts.map((p) => p['name']).join(', ');
        return '‚ö†Ô∏è Low Stock Alert: ${lowStockProducts.length} product(s) have low stock.\n\nAffected products: $productNames\n\nRecommendations:\n‚Ä¢ Restock these products quickly\n‚Ä¢ Analyze sales trends\n‚Ä¢ Consider increasing minimum stock\n‚Ä¢ Monitor popular products';
      } else {
        return '‚úÖ Your inventory is well managed! No products with low stock.\n\nTips to maintain:\n‚Ä¢ Regularly check stock levels\n‚Ä¢ Analyze sales trends\n‚Ä¢ Adjust minimum stock thresholds\n‚Ä¢ Plan restocking schedules';
      }
    }
  }

  String _getSalesAdvice(Map<String, dynamic> businessData, String language) {
    final totalSales = businessData['totalSales'] ?? 0;
    final recentSales = businessData['recentSales'] ?? 0;
    final averageTransaction = businessData['averageTransactionValue'] ?? 0;
    final topProducts = businessData['topProducts'] as List? ?? [];

    if (language == 'fr') {
      String response = 'üìä Analyse des Ventes:\n\n';
      response += '‚Ä¢ Ventes totales: ${NumberFormat('#,##0').format(totalSales)} RWF\n';
      response += '‚Ä¢ Transactions r√©centes: $recentSales\n';
      response += '‚Ä¢ Valeur moyenne par transaction: ${NumberFormat('#,##0').format(averageTransaction)} RWF\n\n';

      if (topProducts.isNotEmpty) {
        response += 'üèÜ Produits les plus vendus:\n';
        for (int i = 0; i < topProducts.take(3).length; i++) {
          final product = topProducts[i];
          response += '${i + 1}. ${product['name']} - ${product['quantity']} unit√©s\n';
        }
        response += '\nStrat√©gies d\'am√©lioration:\n‚Ä¢ Promouvoir les produits populaires\n‚Ä¢ Cr√©er des offres group√©es\n‚Ä¢ Am√©liorer l\'exp√©rience client\n‚Ä¢ Analyser les tendances saisonni√®res';
      }

      return response;
    } else {
      String response = 'üìä Sales Analysis:\n\n';
      response += '‚Ä¢ Total sales: ${NumberFormat('#,##0').format(totalSales)} RWF\n';
      response += '‚Ä¢ Recent transactions: $recentSales\n';
      response += '‚Ä¢ Average transaction value: ${NumberFormat('#,##0').format(averageTransaction)} RWF\n\n';

      if (topProducts.isNotEmpty) {
        response += 'üèÜ Top selling products:\n';
        for (int i = 0; i < topProducts.take(3).length; i++) {
          final product = topProducts[i];
          response += '${i + 1}. ${product['name']} - ${product['quantity']} units\n';
        }
        response += '\nImprovement strategies:\n‚Ä¢ Promote popular products\n‚Ä¢ Create bundle offers\n‚Ä¢ Enhance customer experience\n‚Ä¢ Analyze seasonal trends';
      }

      return response;
    }
  }

  String _getCostOptimizationAdvice(Map<String, dynamic> businessData, String language) {
    final averageTransaction = businessData['averageTransactionValue'] ?? 0;
    final totalProducts = businessData['totalProducts'] ?? 0;
    final lowStockProducts = businessData['lowStockProducts'] as List? ?? [];

    if (language == 'fr') {
      String response = 'üí∞ Strat√©gies de Minimisation des Co√ªts:\n\n';

      // Inventory optimization
      if (lowStockProducts.isNotEmpty) {
        response += 'üì¶ Optimisation des stocks:\n';
        response += '‚Ä¢ R√©duisez les pertes en g√©rant mieux l\'inventaire\n';
        response += '‚Ä¢ √âvitez les ruptures de stock co√ªteuses\n';
        response += '‚Ä¢ Analysez les tendances pour optimiser les commandes\n\n';
      }

      // Transaction value optimization
      if (averageTransaction < 5000) {
        response += 'üí° Am√©lioration de la valeur transactionnelle:\n';
        response += '‚Ä¢ Cr√©ez des offres group√©es\n';
        response += '‚Ä¢ Proposez des services premium\n';
        response += '‚Ä¢ Encouragez les achats multiples\n\n';
      }

      response += 'üéØ Recommandations g√©n√©rales:\n';
      response += '‚Ä¢ N√©gociez de meilleurs prix avec les fournisseurs\n';
      response += '‚Ä¢ Optimisez les processus de vente\n';
      response += '‚Ä¢ Utilisez les donn√©es pour prendre des d√©cisions √©clair√©es\n';
      response += '‚Ä¢ Consid√©rez les paiements num√©riques pour r√©duire les co√ªts de gestion';

      return response;
    } else {
      String response = 'üí∞ Cost Minimization Strategies:\n\n';

      // Inventory optimization
      if (lowStockProducts.isNotEmpty) {
        response += 'üì¶ Inventory optimization:\n';
        response += '‚Ä¢ Reduce losses by better inventory management\n';
        response += '‚Ä¢ Avoid costly stockouts\n';
        response += '‚Ä¢ Analyze trends to optimize orders\n\n';
      }

      // Transaction value optimization
      if (averageTransaction < 5000) {
        response += 'üí° Transaction value improvement:\n';
        response += '‚Ä¢ Create bundle offers\n';
        response += '‚Ä¢ Offer premium services\n';
        response += '‚Ä¢ Encourage multiple purchases\n\n';
      }

      response += 'üéØ General recommendations:\n';
      response += '‚Ä¢ Negotiate better prices with suppliers\n';
      response += '‚Ä¢ Optimize sales processes\n';
      response += '‚Ä¢ Use data for informed decisions\n';
      response += '‚Ä¢ Consider digital payments to reduce handling costs';

      return response;
    }
  }

  String _getCustomerAdvice(Map<String, dynamic> businessData, String language) {
    final totalCustomers = businessData['totalCustomers'] ?? 0;
    final averageTransaction = businessData['averageTransactionValue'] ?? 0;

    if (language == 'fr') {
      return 'üë• Gestion des Clients:\n\n'
          '‚Ä¢ Nombre total de clients: $totalCustomers\n'
          '‚Ä¢ Valeur moyenne par client: ${NumberFormat('#,##0').format(averageTransaction)} RWF\n\n'
          'Strat√©gies d\'am√©lioration:\n'
          '‚Ä¢ Cr√©ez un programme de fid√©lit√©\n'
          '‚Ä¢ Collectez les commentaires clients\n'
          '‚Ä¢ Personnalisez les offres\n'
          '‚Ä¢ Am√©liorez le service client\n'
          '‚Ä¢ Analysez les pr√©f√©rences clients';
    } else {
      return 'üë• Customer Management:\n\n'
          '‚Ä¢ Total customers: $totalCustomers\n'
          '‚Ä¢ Average customer value: ${NumberFormat('#,##0').format(averageTransaction)} RWF\n\n'
          'Improvement strategies:\n'
          '‚Ä¢ Create a loyalty program\n'
          '‚Ä¢ Collect customer feedback\n'
          '‚Ä¢ Personalize offers\n'
          '‚Ä¢ Enhance customer service\n'
          '‚Ä¢ Analyze customer preferences';
    }
  }

  String _getGeneralBusinessAdvice(Map<String, dynamic> businessData, String language) {
    if (language == 'fr') {
      return 'üíº Conseils G√©n√©raux d\'Entreprise:\n\n'
          'üìà Croissance:\n'
          '‚Ä¢ Analysez r√©guli√®rement vos donn√©es\n'
          '‚Ä¢ Identifiez les tendances saisonni√®res\n'
          '‚Ä¢ Diversifiez votre offre de produits\n'
          '‚Ä¢ Investissez dans le marketing\n\n'
          '‚ö° Efficacit√©:\n'
          '‚Ä¢ Automatisez les processus r√©p√©titifs\n'
          '‚Ä¢ Utilisez la technologie pour la gestion\n'
          '‚Ä¢ Formez votre √©quipe r√©guli√®rement\n'
          '‚Ä¢ Optimisez vos op√©rations quotidiennes\n\n'
          'üéØ Strat√©gie:\n'
          '‚Ä¢ D√©finissez des objectifs clairs\n'
          '‚Ä¢ Mesurez vos performances\n'
          '‚Ä¢ Adaptez-vous aux changements du march√©\n'
          '‚Ä¢ Maintenez une relation client solide';
    } else {
      return 'üíº General Business Advice:\n\n'
          'üìà Growth:\n'
          '‚Ä¢ Regularly analyze your data\n'
          '‚Ä¢ Identify seasonal trends\n'
          '‚Ä¢ Diversify your product offering\n'
          '‚Ä¢ Invest in marketing\n\n'
          '‚ö° Efficiency:\n'
          '‚Ä¢ Automate repetitive processes\n'
          '‚Ä¢ Use technology for management\n'
          '‚Ä¢ Train your team regularly\n'
          '‚Ä¢ Optimize daily operations\n\n'
          'üéØ Strategy:\n'
          '‚Ä¢ Set clear objectives\n'
          '‚Ä¢ Measure your performance\n'
          '‚Ä¢ Adapt to market changes\n'
          '‚Ä¢ Maintain strong customer relationships';
    }
  }

  String _getGreetingResponse(Map<String, dynamic> businessData, String language) {
    final totalSales = businessData['totalSales'] ?? 0;
    final recentSales = businessData['recentSales'] ?? 0;

    if (language == 'fr') {
      return 'üëã Bonjour! Je suis votre assistant IA pour la gestion d\'entreprise.\n\n'
          'üìä Aper√ßu rapide:\n'
          '‚Ä¢ Ventes totales: ${NumberFormat('#,##0').format(totalSales)} RWF\n'
          '‚Ä¢ Transactions r√©centes: $recentSales\n\n'
          'Comment puis-je vous aider aujourd\'hui?\n'
          '‚Ä¢ Analyse des ventes\n'
          '‚Ä¢ Optimisation des co√ªts\n'
          '‚Ä¢ Gestion des stocks\n'
          '‚Ä¢ Conseils d\'entreprise';
    } else {
      return 'üëã Hello! I\'m your AI assistant for business management.\n\n'
          'üìä Quick overview:\n'
          '‚Ä¢ Total sales: ${NumberFormat('#,##0').format(totalSales)} RWF\n'
          '‚Ä¢ Recent transactions: $recentSales\n\n'
          'How can I help you today?\n'
          '‚Ä¢ Sales analysis\n'
          '‚Ä¢ Cost optimization\n'
          '‚Ä¢ Inventory management\n'
          '‚Ä¢ Business advice';
    }
  }

  String _getDefaultResponse(String language) {
    if (language == 'fr') {
      return 'ü§ñ Je suis votre assistant IA pour la gestion d\'entreprise.\n\n'
          'Posez-moi des questions sur:\n'
          '‚Ä¢ L\'analyse de vos ventes\n'
          '‚Ä¢ L\'optimisation des co√ªts\n'
          '‚Ä¢ La gestion des stocks\n'
          '‚Ä¢ Les strat√©gies d\'entreprise\n'
          '‚Ä¢ Les recommandations personnalis√©es';
    } else {
      return 'ü§ñ I\'m your AI assistant for business management.\n\n'
          'Ask me about:\n'
          '‚Ä¢ Sales analysis\n'
          '‚Ä¢ Cost optimization\n'
          '‚Ä¢ Inventory management\n'
          '‚Ä¢ Business strategies\n'
          '‚Ä¢ Personalized recommendations';
    }
  }

  // Generate detailed minimization strategy report
  Future<Map<String, dynamic>> generateDetailedMinimizationStrategy() async {
    final businessData = await _getBusinessContext();
    
    final strategies = <String, Map<String, dynamic>>{};
    
    // Inventory optimization
    final lowStockProducts = businessData['lowStockProducts'] as List? ?? [];
    if (lowStockProducts.isNotEmpty) {
      strategies['inventory'] = {
        'priority': 'high',
        'category': 'inventory',
        'title': 'Stock Optimization',
        'description': 'Optimize inventory management to reduce costs and prevent stockouts',
        'actions': [
          'Implement just-in-time inventory system',
          'Set up automated reorder points',
          'Analyze demand patterns',
          'Negotiate better supplier terms',
        ],
        'potentialSavings': '15-25% reduction in inventory costs',
        'implementationTime': '2-4 weeks',
      };
    }

    // Transaction value optimization
    final averageTransaction = businessData['averageTransactionValue'] ?? 0;
    if (averageTransaction < 5000) {
      strategies['transaction'] = {
        'priority': 'medium',
        'category': 'sales',
        'title': 'Transaction Value Optimization',
        'description': 'Increase average transaction value through bundling and upselling',
        'actions': [
          'Create product bundles',
          'Implement cross-selling strategies',
          'Offer premium services',
          'Develop loyalty programs',
        ],
        'potentialSavings': '20-30% increase in revenue',
        'implementationTime': '1-2 weeks',
      };
    }

    // Process optimization
    strategies['process'] = {
      'priority': 'medium',
      'category': 'operations',
      'title': 'Process Optimization',
      'description': 'Streamline business processes to reduce operational costs',
      'actions': [
        'Automate repetitive tasks',
        'Implement digital payment systems',
        'Optimize staff scheduling',
        'Reduce paper-based processes',
      ],
      'potentialSavings': '10-20% reduction in operational costs',
      'implementationTime': '3-6 weeks',
    };

    // Customer retention
    strategies['retention'] = {
      'priority': 'low',
      'category': 'marketing',
      'title': 'Customer Retention Strategy',
      'description': 'Focus on retaining existing customers to reduce acquisition costs',
      'actions': [
        'Implement customer feedback system',
        'Create personalized offers',
        'Develop customer loyalty program',
        'Improve customer service',
      ],
      'potentialSavings': '5-15% increase in customer lifetime value',
      'implementationTime': '4-8 weeks',
    };

    return {
      'strategies': strategies,
      'businessData': businessData,
      'summary': {
        'totalPotentialSavings': '30-50% cost reduction',
        'implementationTimeframe': '2-8 weeks',
        'priorityOrder': ['inventory', 'transaction', 'process', 'retention'],
      },
    };
  }
} 